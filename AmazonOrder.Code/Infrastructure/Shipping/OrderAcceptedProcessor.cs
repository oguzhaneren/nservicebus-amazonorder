//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by ServiceMatrix.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using NServiceBus;
using AmazonOrder.Contracts.Sales;
using AmazonOrder.Contracts.Billing;
using NServiceBus.Saga;


namespace AmazonOrder.Shipping
{
    public partial class OrderAcceptedProcessor : Saga<OrderAcceptedProcessorSagaData>, IOrderAcceptedProcessor, ServiceMatrix.Shared.INServiceBusComponent, IAmStartedByMessages<OrderAccepted>, IAmStartedByMessages<OrderBilled>
    {
		
		public void Handle(OrderAccepted message)
		{
			// Store message in Saga Data for later use
			this.Data.OrderAccepted = message;
			// Handle message on partial class
			this.HandleImplementation(message);

			// Check if Saga is Completed 
			CheckIfAllMessagesReceived();
		}

		public void Handle(OrderBilled message)
		{
			// Store message in Saga Data for later use
			this.Data.OrderBilled = message;
			// Handle message on partial class
			this.HandleImplementation(message);

			// Check if Saga is Completed 
			CheckIfAllMessagesReceived();
		}

		partial void HandleImplementation(OrderAccepted message);

		partial void HandleImplementation(OrderBilled message);

        public void CheckIfAllMessagesReceived()
        {
            if (this.Data.OrderAccepted != null && this.Data.OrderBilled != null)
            {
                AllMessagesReceived();
            }
        }

        partial void AllMessagesReceived();
     }

     public partial class OrderAcceptedProcessorSagaData : IContainSagaData
     {
           public virtual Guid Id { get; set; }
           public virtual string Originator { get; set; }
           public virtual string OriginalMessageId { get; set; }

           public virtual OrderAccepted OrderAccepted { get; set; }
           public virtual OrderBilled OrderBilled { get; set; }

    }
    
    public partial interface IOrderAcceptedProcessor
    {
		
    }
}
